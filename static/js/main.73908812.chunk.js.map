{"version":3,"sources":["Media/logo.svg","Components/Card/Card.js","Components/Border/AmmountData/TipAmmountCalculation/TipAmmountPerson.js","Components/Border/AmmountData/TipAmmountCalculation/TotalPerson.js","Components/Border/AmmountData/TipAmmountCalculation/ResetBtn.js","Components/Border/AmmountData/AmmountHolder.js","Components/Border/TipData/Bill.js","Components/Border/TipData/SelectTip.js","Components/Border/TipData/NumberOfPeople.js","Components/Border/Border.js","App.js","index.js"],"names":["Card","props","className","src","Logo","alt","children","TipAmmountPerson","tip","tipData","price","selectTip","toFixed","TotalPerson","entireTip","personData","numberOfPeople","isNaN","Infinity","ResetBtn","btnStatus","onClick","resetData","resetMergeCd","current","resetPpl","resetBill","resetTip","AmmountHolder","filledInfo","dataReset","resetMerge","Bill","forwardRef","ref","useState","currentBill","setNewBill","useImperativeHandle","value","onChange","event","target","dragAmmount","Number","placeholder","type","TIP_PERCENT","SelectTip","customStatus","newCustomStatus","currentTip","setNewTip","statusHandler","status","tipHandler","tipDrag","map","button","NumberOfPeople","currentPpl","newPpl","pplNum","dragPpl","priceAmmount","DUMMY_DATA","Border","currentPrice","setCurrentPrice","useRef","billAmmount","prevBill","Object","assign","tipAmmount","prevTip","selectedTip","pplAmmount","prevPpl","resetedData","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73908812.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3cc0528b.svg\";","import React from 'react';\r\n\r\nimport './Card.css'\r\nimport Logo from '../../Media/logo.svg'\r\n\r\n/* The Card component is responsible for maintaining the background and our application. */\r\n\r\nconst Card = (props) => {\r\n\r\n    \r\n    return (\r\n        <div className='card'>\r\n            <img className='logo' src={Logo} alt='logo' />\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport './TipAmmountPerson.css'\r\n\r\nconst TipAmmountPerson = (props) => {\r\n\r\n    /* Calculates tip value based on amount and percentage. */\r\n    const tip = props.tipData.price * (props.tipData.selectTip / 100);\r\n\r\n    return (\r\n        <div className='tipAmmount'>\r\n            <div className='tipAmmount__person'>\r\n                <h5>Tip Ammount</h5>\r\n                <h6>/ person</h6>\r\n            </div>\r\n            {props.tipData.price < 1 ?\r\n                <div className='tipAmmount__result'>$0.00</div> :\r\n                <div className='tipAmmount__result'>{'$' + tip.toFixed(2)}</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TipAmmountPerson;","import React from 'react';\r\n\r\nimport './TotalPerson.css';\r\n\r\nconst TotalPerson = (props) => {\r\n\r\n    /* Counts the tip by the number of people. */\r\n    const entireTip = (props.personData.price * (props.personData.selectTip / 100)) / props.personData.numberOfPeople;\r\n\r\n    return (\r\n        <div className='total'>\r\n            <div className='total__person'>\r\n                <h5>Total</h5>\r\n                <h6>/ person</h6>\r\n            </div>\r\n            {isNaN(entireTip) || entireTip === Infinity ?/* Because of the fact that 0/0 in JS returns infinity, or NaN when the user doesn't enter all the data, I used a ternary operator here that will not display NaN or Infinity. */\r\n                <div className='total__result'>$0.00</div> :\r\n                <div className='total__result'>{'$' + entireTip.toFixed(2)}</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TotalPerson;","import React from 'react';\r\n\r\nimport './ResetBtn.css';\r\n\r\nconst ResetBtn = (props) => {\r\n\r\n    /* Uses the dataResetHandler function from the Border component to clear the DUMMY_DATA object. */\r\n    function resetAll() {\r\n        props.resetData({\r\n            price: 0,\r\n            selectTip: 0,\r\n            numberOfPeople: 0,\r\n        })\r\n    }\r\n\r\n    /* if() checks whether the user has entered a value and then activates the reset button to clear the data. Additionally, changing its color. */\r\n    if (props.btnStatus.price !== 0 ||\r\n        props.btnStatus.selectTip !== 0 ||\r\n        props.btnStatus.numberOfPeople !== 0) {\r\n\r\n        return (\r\n            <div className='btn'>\r\n                <button onClick={() => {\r\n                    resetAll();\r\n                    props.resetMergeCd[0].current.resetPpl();\r\n                    props.resetMergeCd[1].current.resetBill();\r\n                    props.resetMergeCd[2].current.resetTip();\r\n                }} className='btn__reset'>RESET</button>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='btn'>\r\n                <button className='btn__standard'>RESET</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResetBtn;","import React from 'react';\r\n\r\nimport './AmmountHolder.css'\r\n\r\nimport TipAmmountPerson from './TipAmmountCalculation/TipAmmountPerson.js'\r\nimport TotalPerson from './TipAmmountCalculation/TotalPerson';\r\nimport ResetBtn from './TipAmmountCalculation/ResetBtn';\r\n\r\n/* AmmountHolder serves us as the parent component for the TipAmmountPerson, TotalPerson, ResetBtn components. */\r\nconst AmmountHolder = (props) => {\r\n\r\n    return (\r\n        <div className='ammountHolder'>\r\n            <TipAmmountPerson tipData={props.filledInfo} />\r\n            <TotalPerson personData={props.filledInfo} />\r\n            <ResetBtn resetData={props.dataReset} resetMergeCd={props.resetMerge} btnStatus={props.filledInfo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AmmountHolder;","import React, { useState, forwardRef, useImperativeHandle } from 'react';\r\n\r\nimport './Bill.css'\r\n\r\nconst Bill = forwardRef((props, ref) => {\r\n\r\n    /* Collects data entered by the user. */\r\n    const [currentBill, setNewBill] = useState('');\r\n\r\n    /* Takes care of passing the data to the parent Border component. */\r\n    function billHandler(event) {\r\n        setNewBill(event.target.value);\r\n        props.dragAmmount({ price: Number(event.target.value) })\r\n    }\r\n\r\n    /* Allows you to call the function from within the ResetBtn sibling component. Which clears the <input> field. */\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            resetBill() {\r\n                setNewBill('')\r\n            }\r\n        }),\r\n    )\r\n\r\n    return (\r\n        <div className='bill'>\r\n            <form className='bill__form'>\r\n                <h5 className='bill__header'>Bill</h5>\r\n                <input value={currentBill} onChange={billHandler} className='bill__price' placeholder={'0'} type='number' />\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Bill;","import React, { useState, forwardRef, useImperativeHandle } from 'react';\r\n\r\nimport './SelectTip.css'\r\n\r\n/* TIP_PERCENT I'm holding an array with an object that I'll later use to render a <button> with the appropriate percentage value. */\r\nconst TIP_PERCENT = [\r\n    { tip: 5 },\r\n    { tip: 10 },\r\n    { tip: 15 },\r\n    { tip: 25 },\r\n    { tip: 50 },\r\n]\r\n\r\n\r\nconst SelectTip = forwardRef((props, ref) => {\r\n\r\n    /* Deals with displaying a custom field for entering a percentage value. */\r\n    const [customStatus, newCustomStatus] = useState(false);\r\n\r\n    /* Collects data entered by the user. */\r\n    const [currentTip, setNewTip] = useState('')\r\n\r\n    /* The on/off switch for our custom <input> field. */\r\n    function statusHandler(status) {\r\n        newCustomStatus(status)\r\n    }\r\n\r\n    /* Takes care of passing the data to the parent Border component. */\r\n    function tipHandler(event) {\r\n        if (typeof event === 'number') {\r\n            props.tipDrag({ selectTip: event })\r\n        } else {\r\n            setNewTip(event.target.value)\r\n            props.tipDrag({ selectTip: Number(event.target.value) })\r\n        }\r\n    }\r\n\r\n    /* Allows you to call the function from within the ResetBtn sibling component. Which clears the custom <input> field. And switches it in <button>. */\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            resetTip() {\r\n                setNewTip('')\r\n                newCustomStatus(false)\r\n            }\r\n        }),\r\n    )\r\n\r\n    return (\r\n        <div className='selectTip'>\r\n            <h5 className='selectTip__header'>Select Tip %</h5>\r\n            <div className='selectTip__percent'>\r\n                {TIP_PERCENT.map(button => (\r\n                    <button className='selectTip__style' key={button.tip} onClick={() => { statusHandler(false); tipHandler(button.tip) }}>{button.tip + '%'}</button>\r\n                ))}\r\n                {customStatus === false ?\r\n                    <button className='selectTip__style__custom' onClick={statusHandler}>Custom</button> :\r\n                    <input value={currentTip} className='custom__tip' placeholder={'%'} type='number' onChange={tipHandler} onClick={() => { statusHandler(true); }} />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default SelectTip;","import React, { useState, forwardRef, useImperativeHandle } from 'react';\r\n\r\nimport './NumberOfPeople.css'\r\n\r\nconst NumberOfPeople = forwardRef((props, ref) => {\r\n\r\n    /* Collects data entered by the user. */\r\n    const [currentPpl, newPpl] = useState('')\r\n\r\n    /* Takes care of passing the data to the parent Border component. */\r\n    const pplNum = (event) => {\r\n        newPpl(event.target.value)\r\n        props.dragPpl({ numberOfPeople: Number(event.target.value) })\r\n    }\r\n\r\n    /* Allows you to call the function from within the ResetBtn sibling component. Which clears the <input> field. */\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            resetPpl() {\r\n                newPpl('')\r\n            }\r\n        }),\r\n    )\r\n\r\n    return (\r\n        <div className='people'>\r\n            <form className='people__form'>\r\n                <h5 className='people__label'>Number of People</h5>\r\n                {props.priceAmmount.price > 0 && currentPpl < 1 ?\r\n                    <h5 className='people__label__zero'>Can't be zero</h5> :\r\n                    <h5 className='people__label__hiden'>Can't be zero</h5>\r\n                }\r\n\r\n                {props.priceAmmount.price < 1 || currentPpl > 0 ?\r\n                    <input value={currentPpl} className='people__ammount' placeholder={'0'} onChange={pplNum} type='number' /> :\r\n                    <input value={currentPpl} className='people__ammount__warn' placeholder={'0'} onChange={pplNum} type='number' />\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NumberOfPeople;\r\n","import React, { useState, useRef } from 'react';\r\n\r\nimport Card from '../Card/Card'\r\nimport AmmountHolder from './AmmountData/AmmountHolder';\r\nimport Bill from './TipData/Bill'\r\nimport SelectTip from './TipData/SelectTip'\r\nimport NumberOfPeople from './TipData//NumberOfPeople';\r\n\r\nimport './Border.css'\r\n\r\n/* DUMMY_DATA stores in the object the data entered by the user into our application */\r\nconst DUMMY_DATA = {\r\n    price: 0,\r\n    selectTip: 0,\r\n    numberOfPeople: 0,\r\n};\r\n\r\n/* Component Border is the main component that ties all the others together. */\r\nconst Border = (props) => {\r\n\r\n    const [currentPrice, setCurrentPrice] = useState(DUMMY_DATA); /* Manages our data from the DUMMY_DATA object. */\r\n\r\n    const billDragHandler = (billAmmount) => { /* Inserts nade from component Bill and combines it with an existing DUMMY_DATA object */\r\n        setCurrentPrice(prevBill => {\r\n            return Object.assign({}, prevBill, billAmmount);\r\n        })\r\n    };\r\n\r\n    const pplDragHandler = (pplAmmount) => { /* Inserts nade from component NumberOfPeople and combines it with an existing DUMMY_DATA object */\r\n        setCurrentPrice(prevPpl => {\r\n            return Object.assign({}, prevPpl, pplAmmount);\r\n        })\r\n    };\r\n\r\n    const tipDragHandler = (tipAmmount) => { /* Inserts nade from component SelectTip and combines it with an existing DUMMY_DATA object */\r\n        setCurrentPrice(prevTip => {\r\n            return Object.assign({}, prevTip, tipAmmount);\r\n        })\r\n    };\r\n\r\n    const dataResetHandler = (resetedData) => { /* Provides data from the Border component via props to the AmmountHolder --> ResetBtn component, a function that clears the data that are passed to the DUMMY_DATA object */\r\n        setCurrentPrice(resetedData);\r\n    };\r\n\r\n\r\n    /* useRef() allow you to call functions from the Bill, SelectTip \r\n    and NumberOfPeople components using the ResetBtn component that clears \r\n    the data entered into the <input> field. And they are passed as a resetMerge \r\n    array to the AmmountHolder --> ResetBtn. */\r\n    const resetPpl = useRef();\r\n    const resetBill = useRef();\r\n    const resetTip = useRef();\r\n\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <div className='border'>\r\n                <Bill dragAmmount={billDragHandler} ref={resetBill} />\r\n                <SelectTip tipDrag={tipDragHandler} selectedTip={currentPrice} ref={resetTip} />\r\n                <NumberOfPeople priceAmmount={currentPrice} dragPpl={pplDragHandler} ref={resetPpl} />\r\n                <AmmountHolder dataReset={dataResetHandler} filledInfo={currentPrice} resetMerge={[resetPpl, resetBill, resetTip]} />\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Border;","import './App.css';\n\nimport Border from './Components/Border/Border'\n\nfunction App() {\n  return (\n    <Border />\n  );\n} \n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}